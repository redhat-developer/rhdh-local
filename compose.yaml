services:
  # Uncomment the following block to use a PostgreSQL database
  # don't forget to also uncomment 'depends_on' 'db' section in the rhdh service
  # and commentout or delete 'database' section in the app-config.local.yaml

  # db:
  #   container_name: db
  #   image: "registry.redhat.io/rhel8/postgresql-16:latest"
  #   volumes:
  #     - "/var/lib/pgsql/data"
  #   env_file:
  #     - path: "./default.env"
  #       required: true
  #     - path: "./.env"
  #       required: false
  #   environment:
  #     - POSTGRESQL_ADMIN_PASSWORD=${POSTGRES_PASSWORD}
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "postgres"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  rhdh:
    container_name: rhdh
    image: ${RHDH_IMAGE:-quay.io/rhdh-community/rhdh:1.6}
    env_file:
      - path: "./default.env"
        required: true
      - path: "./.env"
        required: false
    user: "1001"
    entrypoint:
      - "/opt/app-root/src/wait-for-plugins-and-start.sh"
    ports: # dclint disable-line no-unbound-port-interfaces
      - "7007:7007"
      - "127.0.0.1:9229:9229"
    environment:
      NODE_OPTIONS: "--inspect=0.0.0.0:9229 --no-node-snapshot"
    volumes:
      - ./wait-for-plugins-and-start.sh:/opt/app-root/src/wait-for-plugins-and-start.sh:Z
      - ./configs:/opt/app-root/src/configs:Z
      - dynamic-plugins-root:/opt/app-root/src/dynamic-plugins-root
    depends_on:
      install-dynamic-plugins:
        condition: service_completed_successfully
    # db:
    #   condition: service_healthy
    networks:
      - backstage-network
  install-dynamic-plugins:
    container_name: rhdh-plugins-installer
    image: ${RHDH_IMAGE:-quay.io/rhdh-community/rhdh:1.6}
    # docker compose volumes are owned by root, so we need to run as root to write to them
    # the main rhdh container will be able to read from this as files are world readable
    user: "root"
    entrypoint:
      - ./prepare-and-install-dynamic-plugins.sh
    env_file:
      - path: "./default.env"
        required: true
      - path: "./.env"
        required: false
    volumes:
      - ./prepare-and-install-dynamic-plugins.sh:/opt/app-root/src/prepare-and-install-dynamic-plugins.sh:Z
      - ./local-plugins:/opt/app-root/src/local-plugins:Z
      - ./configs:/opt/app-root/src/configs:Z
      - dynamic-plugins-root:/dynamic-plugins-root
  backstage-internal-sonataflow:
    container_name: backstage-internal-sonataflow
    image: quay.io/kubesmarts/incubator-kie-sonataflow-devmode:9.103.x-prod
    environment:
      QUARKUS_HTTP_PORT: "8899"
      KOGITO_SERVICE_URL: http://backstage-internal-sonataflow:8899
      KOGITO.CODEGEN.PROCESS.FAILONERROR: "false"
      QUARKUS_EMBEDDED_POSTGRESQL_DATA_DIR: /home/kogito/persistence
      NOTIFICATIONS_BEARER_TOKEN: "***"
      BACKSTAGE_NOTIFICATIONS_URL: http://host.docker.internal:7008
    ports:
      - "8899:8899"
    volumes:
      - /home/jennifer/code/rhdh/rhdh-workflow/backstage-orchestrator-workflows/workflows:/home/kogito/serverless-workflow-project/src/main/resources:Z
    networks:
      - backstage-network

volumes:
  dynamic-plugins-root:
networks:
  backstage-network:
    driver: bridge