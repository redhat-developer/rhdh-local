name: CI

on:
  push:
    branches:
      - main
      - release-1.[0-9]+
  pull_request:
    branches:
      - main
      - release-1.[0-9]+

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Lint
      # Based on https://github.com/zavoloklom/docker-compose-linter/tree/main?tab=readme-ov-file
      run: |
        npx --yes dclint .

  test:
    strategy:
      fail-fast: false
      matrix:
        tool:
          - docker
          - podman
        userConfig:
          - "false"
          - "true"
        composeConfig:
          - name: "default"
            cliArgs: ""
          - name: "corporate-proxy"
            cliArgs: "-f compose.yaml -f compose-with-corporate-proxy.yaml"
          - name: "dynamic-plugins-root"
            cliArgs: "-f compose.yaml -f compose-dynamic-plugins-root.yaml"
          - name: "orchestrator-workflow"
            cliArgs: "-f compose.yaml -f orchestrator/compose.yaml"
          - name: "developer-lightspeed-minimal"
            cliArgs: "-f compose.yaml -f developer-lightspeed/compose.yaml"
          - name: "developer-lightspeed"
            cliArgs: "-f compose.yaml -f developer-lightspeed/compose-with-ollama.yaml"

    name: "${{ matrix.tool }} compose - ${{ matrix.composeConfig.name }}${{ matrix.userConfig == 'true' && ' - user config' || '' }}"
    runs-on: ubuntu-latest
    env:
      # The default corporate proxy image is located on registry.redhat.io, which requires authentication.
      CORPORATE_PROXY_IMAGE: docker.io/ubuntu/squid:latest
      # To be able to call the "podman compose" wrapper using the "podman-compose" binary
      PODMAN_COMPOSE_PROVIDER: "podman-compose"
      PODMAN_COMPOSE_WARNING_LOGS: "false"

    steps:
    - uses: actions/checkout@v4

    - name: Update docker version
      if: ${{ matrix.tool == 'docker' }}
      # https://docs.docker.com/engine/install/ubuntu#install-using-the-repository
      run: |
        # Remove any previous installation
        for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd crun runc docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin; do
          sudo apt-get remove --purge -y $pkg || true
        done

        # Remove podman
        for pkg in podman containers-common crun runc buildah; do
          sudo apt-get remove --purge -y $pkg || true
        done

        # Add Docker's official GPG key:
        sudo apt-get update
        sudo apt-get install ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        # Add the repository to Apt sources:
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

        # Just check that podman is not available
        if podman version 2>/dev/null; then
          echo "podman should not be available"
          exit 1
        fi

    - name: Update podman version
      if: ${{ matrix.tool == 'podman' }}
      # https://github.com/containers/podman/discussions/25582
      run: |
        # Remove any previous installation
        for pkg in podman containers-common crun runc buildah; do
          sudo apt-get remove --purge -y $pkg || true
        done

        # Remove docker and docker-compose
        for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd crun runc docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin; do
          sudo apt-get remove --purge -y $pkg || true
        done

        # Define file paths
        PINNING_FILE="/etc/apt/preferences.d/podman-plucky.pref"
        SOURCE_LIST="/etc/apt/sources.list.d/plucky.list"

        # Write plucky APT source list
        echo "Adding plucky repo to $SOURCE_LIST..."
        echo "deb http://archive.ubuntu.com/ubuntu plucky main universe" | \
          sudo tee "$SOURCE_LIST"

        # Write APT pinning rules
        echo "Writing APT pinning rules to $PINNING_FILE..."
        cat <<EOF > /tmp/pinning_file
        Package: podman buildah golang-github-containers-common crun libgpgme11t64 libgpg-error0 golang-github-containers-image catatonit conmon containers-storage
        Pin: release n=plucky
        Pin-Priority: 991

        Package: libsubid4 netavark passt aardvark-dns containernetworking-plugins libslirp0 slirp4netns
        Pin: release n=plucky
        Pin-Priority: 991

        Package: *
        Pin: release n=plucky
        Pin-Priority: 400
        EOF
        sudo mv -f /tmp/pinning_file "$PINNING_FILE"

        # Update APT cache
        echo "Updating APT package list..."
        sudo apt-get update

        echo "plucky pinning setup complete."
        sudo apt-get install -y podman crun

        # Just check that docker and docker-compose are not available
        for cmd in docker docker-compose; do
          if $cmd version 2>/dev/null; then
            echo "$cmd should not be available"
            exit 1
          fi
        done

    - name: Install podman-compose provider
      if: ${{ matrix.tool == 'podman' }}
      env:
        PODMAN_COMPOSE_VERSION: "v1.5.0"
      run: |
        pip3 install podman-compose=="${PODMAN_COMPOSE_VERSION}"

    - name: Display container engine version
      run: |
        echo "*** ${{ matrix.tool }} version ***"
        ${{ matrix.tool }} version
        echo
        echo "*** ${{ matrix.tool }} compose version ***"
        ${{ matrix.tool }} compose version

    - name: ${{ matrix.tool }} info
      run: ${{ matrix.tool }} info

    - name: Compose config
      run: ${{ matrix.tool }} compose ${{ matrix.composeConfig.cliArgs }} config

    - name: Add user-specific configuration
      if: ${{ matrix.userConfig == 'true' }}
      env:
        # https://docs.github.com/en/actions/how-tos/monitor-workflows/enable-debug-logging#enabling-runner-diagnostic-logging
        LOG_LEVEL: ${{ vars.ACTIONS_RUNNER_DEBUG == 'true' && 'debug' || 'info' }}
      run: |
        # Custom .env file
        cat <<EOF > .env
        LOG_LEVEL=${{ env.LOG_LEVEL }}
        ROARR_LOG=true
        NODE_DEBUG=fetch

        GITHUB_APP_APP_ID=123456
        GITHUB_APP_CLIENT_ID=MY_GITHUB_APP_CLIENT_ID
        GITHUB_APP_CLIENT_SECRET=MY_GITHUB_APP_CLIENT_SECRET
        GITHUB_APP_WEBHOOK_SECRET=MY_GITHUB_APP_WEBHOOK_SECRET
        GITHUB_APP_PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----\nxxx\n-----END RSA PRIVATE KEY-----" # notsecret

        EOF

        # Custom dynamic-plugins.override.yaml
        cat <<EOF > configs/dynamic-plugins/dynamic-plugins.override.yaml
        includes: [dynamic-plugins.default.yaml]
        plugins:
        - package: ./dynamic-plugins/dist/red-hat-developer-hub-backstage-plugin-bulk-import-backend-dynamic
          disabled: false
        - package: ./dynamic-plugins/dist/red-hat-developer-hub-backstage-plugin-bulk-import
          disabled: false
        EOF

        # Custom extra files
        cp -vr configs/extra-files/github-app-credentials.example.yaml configs/extra-files/github-app-credentials.yaml

        # Custom app-config.local.yaml
        cp -vr configs/app-config/app-config.local.example.yaml configs/app-config/app-config.local.yaml

        # Custom users.override.yaml
        cp configs/catalog-entities/users.override.example.yaml configs/catalog-entities/users.override.yaml

        # Custom components.override.yaml
        cp configs/catalog-entities/components.override.example.yaml configs/catalog-entities/components.override.yaml

    - name: Create dynamic plugins directory
      if: ${{ matrix.composeConfig.name == 'dynamic-plugins-root' }}
      run: |
          mkdir -p dynamic-plugins-root

    - name: Start app
      run: |
        ${{ matrix.tool }} compose ${{ matrix.composeConfig.cliArgs }} up --detach --quiet-pull
        ${{ matrix.tool }} compose ${{ matrix.composeConfig.cliArgs }} ps

    - name: Wait for HTTP 200 response from homepage
      run: |
        max=30
        i=0
        echo "Waiting for localhost to respond with status code 200..."
        until curl -i --head --fail http://localhost:7007; do
          i=$((i+1))
          if [ "$i" -ge "$max" ]; then
            echo "[$(date)] Max retries reached. Exiting. Take a look at the logs in the step below."
            exit 1
          fi
          echo "($i/$max) [$(date)] Waiting for http://localhost:7007 to return HTTP 200..."
          sleep 10
        done
        echo "[$(date)] RHDH is ready"
        curl -i --insecure http://localhost:7007

    - name: curl from RHDH Container (for troubleshooting)
      if: failure()
      run: |
        ${{ matrix.tool }} exec rhdh curl -i --head --fail http://localhost:7007

    - name: Compose logs
      if: always()
      run: |
        for svc in $(${{ matrix.tool }} compose ${{ matrix.composeConfig.cliArgs }} config --services | sort); do
          echo "*** $svc ***"
          ${{ matrix.tool }} compose ${{ matrix.composeConfig.cliArgs }} logs --timestamps "$svc" || true
          echo "************"
          echo
        done

    - name: Tear down
      if: always()
      run: |
        ${{ matrix.tool }} compose ${{ matrix.composeConfig.cliArgs }} ps || true
        ${{ matrix.tool }} compose ${{ matrix.composeConfig.cliArgs }} down --volumes || true
